// Mocks generated by Mockito 5.4.5 from annotations
// in git_explorer/test/pages/repo_details/repository/repo_details_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:git_explorer/pages/repo_details/api/fetch_repo_details_api.dart'
    as _i2;
import 'package:git_explorer/pages/repo_details/api/fetch_repo_reference_api.dart'
    as _i5;
import 'package:git_explorer/pages/repo_details/api/fetch_repo_tree_api.dart'
    as _i7;
import 'package:git_explorer/pages/repo_details/models/repo_details/repo_details.dart'
    as _i4;
import 'package:git_explorer/pages/repo_details/models/repo_reference/repo_reference.dart'
    as _i6;
import 'package:git_explorer/pages/repo_details/models/repo_tree/repo_tree.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FetchRepoDetailsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchRepoDetailsApi extends _i1.Mock
    implements _i2.FetchRepoDetailsApi {
  MockFetchRepoDetailsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.RepoDetails?> call({required String? fullName}) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#fullName: fullName}),
            returnValue: _i3.Future<_i4.RepoDetails?>.value(),
          )
          as _i3.Future<_i4.RepoDetails?>);
}

/// A class which mocks [FetchRepoReferenceApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchRepoReferenceApi extends _i1.Mock
    implements _i5.FetchRepoReferenceApi {
  MockFetchRepoReferenceApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i6.RepoReference?> call({
    required String? fullName,
    required String? defaultBranch,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #fullName: fullName,
              #defaultBranch: defaultBranch,
            }),
            returnValue: _i3.Future<_i6.RepoReference?>.value(),
          )
          as _i3.Future<_i6.RepoReference?>);
}

/// A class which mocks [FetchRepoTreeApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchRepoTreeApi extends _i1.Mock implements _i7.FetchRepoTreeApi {
  MockFetchRepoTreeApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i8.RepoTreeResponse?> call({
    required String? fullName,
    required String? sha,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#fullName: fullName, #sha: sha}),
            returnValue: _i3.Future<_i8.RepoTreeResponse?>.value(),
          )
          as _i3.Future<_i8.RepoTreeResponse?>);
}
